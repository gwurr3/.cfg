# vim: syntax=sh:
#  _____ _   _ _   _  ____ _____ ___ ___  _   _ ____
# |  ___| | | | \ | |/ ___|_   _|_ _/ _ \| \ | / ___|
# | |_  | | | |  \| | |     | |  | | | | |  \| \___ \
# |  _| | |_| | |\  | |___  | |  | | |_| | |\  |___) |
# |_|    \___/|_| \_|\____| |_| |___\___/|_| \_|____/
#


ssh-blast() {

	local sshretval

	while [ "$sshretval" != "0" ] ; do
		ssh -o "ConnectTimeout=1" \
		-o "BatchMode=yes" \
		-o "StrictHostKeyChecking=no" \
		-o "UserKnownHostsFile=/dev/null"\
		-o "PreferredAuthentications=publickey"\
		$@

		let sshretval="$?"
	done
}


for i in sha512 sha256 sha1 md5; do
	eval "ssl-cert-${i}() {
		openssl x509 -noout -fingerprint -${i} -in \$1 
	}"
done; unset i

ssl-cert-fingerprints() {
	local i
	if [[ -z $1 ]] ; then 
		printf 'usage: ssl-cert-fingerprints <file>\n'
		return 1
	fi
	for i in sha512 sha256 sha1 md5 ; do
		ssl-cert-$i $1;
	done
}

ssl-cert-info() {
	if [[ -z $1 ]] ; then 
		printf 'usage: ssl-cert-info <file>\n'
		return 1
	fi
	openssl x509 -noout -text -in $1
	ssl-cert-fingerprints $1
}


set_title () {
	if [ "$0" = "bash" ] || [ "$0" = "zsh" ] ; then
		echo -en "\033]0;${@}\007"
	else
		echo -n "\033]0;${@}\007"
	fi
}


cdt() {
	cd "$(mktemp -d)"
	pwd
}

# contains(string, substring)
#
# Returns 0 if the specified string contains the specified substring,
# otherwise returns 1.
contains() {
	string="$1"
	substring="$2"
	if test "${string#*$substring}" != "$string"
	then
		return 0    # $substring is in $string
	else
		return 1    # $substring is not in $string
	fi
}



# note taking
n() {
	$EDITOR ~/notes/"$*".txt
}

nls() {
	ls -c ~/notes/ | grep "$*"
}


list-fonts() {
	fc-scan --format "-%{foundry}-%{family}\n"  `pwd`
}

# this is primarily for daemons and programs that get started in xinitrc
run_util() {
	$@ >/dev/null 2>$HOME/utils.log &
}

run_bg() {
	$@ >/dev/null 2>&1 &
}

genpass() {
	LC_CTYPE=C tr -cd '[:alnum:]' < /dev/urandom | fold -w16 | head -n1
}

ps_memavg() {
	 ps -ylC $1 --sort:rss | awk '{sum+=$8; ++n} END {print "Total Memory = "sum/1024" MB ("n" procs)";print "Avg per process = "sum/n/1024" MB"}'
}

tmux_escape_printf() {
        printf "\033Ptmux;\033%s\033\\" $@
}

iterm2_set_badge() {
	if contains "$IS_THIS_ITERM2" "TRUE" ; then
		printf "\033]1337;SetBadgeFormat=%s\a" $(echo -n "$@" | base64)
		return 0
	elif contains "$IS_THIS_ITERM2" "TMUX" ; then
		tmux_escape_printf `printf "\033]1337;SetBadgeFormat=%s\a" $(echo -n "$@" | base64)`
		return 0
	else
		return 1
	fi
}

home_print() {
	lpr -P dellprinter5210 -h $@
}

# validate an ip
valid_ip() {
	local  ip=$1
	local  stat=1
	
	if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		OIFS=$IFS
		IFS='.'
		ip=($ip)
		IFS=$OIFS
		[[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
			&& ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
		stat=$?
	fi
	return $stat
}

straceall() {
	strace $(pidof "${1}" | sed 's/\([0-9]*\)/-p \1/g')
}

_filelooper() {
	local file="$1"
	shift
	cat<<-EOF
		while IFS= read -r line ; do $* \$line ; done<$file
	EOF
}


filelooper() {
	local runner="$( _filelooper $*)"
	echo -e "will run: \n $runner" >&2
	local timeout=3
	while test $timeout -gt 0 ; do
		echo -e "Will run in $timeout seconds. hit CTRL-C to cancel...\n" >&2
		sleep 1
		let timeout=$((timeout - 1))
	done
	#eval "`/bin/echo \'${runner}\'`"
	eval "${runner}"
}


_df_echoerr() {
	printf '%b\n\r' "$@" >&2 || true
	return 0
}

_df_alert() {
	printf '\a\n\r\t\t\t %b \n\r' "$@" >&2 || true
	return 0
}

_df_error() {
	printf '\a\n\r\tdotfiles init error: %b \n\r' "$@" >&2 || true
	return 0
}

_df_panic() {
	printf '\a\n\r\tdotfiles init panic: %b \n\r' "$@" >&2 || true
	return 127
}

